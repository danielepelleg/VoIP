package Call;

import Audio.AudioFileThread;
import Audio.AudioSinusoidalThread;
import Audio.AudioThread;
import Audio.OutputAudio;
import VoIP.Request;

import VoIP.Response;
import VoIP.Session;
import VoIP.UserAgent;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.Tab;
import javafx.scene.control.TabPane;
import javafx.scene.control.TextField;
import javafx.scene.image.ImageView;
import javafx.scene.layout.AnchorPane;

import java.net.URL;
import java.util.ResourceBundle;

public class ApplicationController implements Initializable {

    /**
     * MAIN TAB ATTRIBUTES
     */
    @FXML
    private TabPane tabPane;

    @FXML
    private AnchorPane anchorMain;

    @FXML
    private Tab mainTab;

    @FXML
    private ImageView logo;

    @FXML
    private Label connectionLabel;

    @FXML
    private Label receiverLabel;

    @FXML
    private Button callButton;

    @FXML
    private Button hangUpButton;

    /**
     * AUDIO TAB
     */
    @FXML
    private Tab audioTab;

    private Thread callThread;

    @FXML
    private AnchorPane anchorAudio;

    @FXML
    private ImageView audio;

    @FXML
    private Label audioControlLabel;

    @FXML
    private Button spoiledAudioButton;

    @FXML
    private Button sinusoidalAudioButton;

    @FXML
    private Button stopButton;

    private Thread currentThread;

    /**
     * LOGS TAB
     */
    @FXML
    private Tab logsTab;

    @FXML
    private AnchorPane anchorLogs;

    @FXML
    private ImageView logsButton;

    @FXML
    private Button saveLogsButton;

    @FXML
    private Button updateButton;

    /**
     * SETTINGS TAB
     */
    @FXML
    private Tab settingsTab;

    @FXML
    private AnchorPane anchorSettings;

    @FXML
    private TextField userNameLabel;

    @FXML
    private Label call_idLabel;

    @FXML
    private Label receiverTagLabel;

    @FXML
    private Button saveSettingsButton;

    /**
     * Initialize the page
     */
    @Override
    public void initialize(URL url, ResourceBundle rb){
        StringBuilder callID = new StringBuilder();
        for(int index = 0; index < 12; index++){
            callID.append(Request.getCallId().charAt(index));
        }
        this.call_idLabel.setText(callID.toString());
        this.receiverTagLabel.setText(Request.getReceiverTag());
    }

    /**
     * Set the Connection status in the relative label                          // MAIN TAB
     *
     * @param value the status, in a string
     */
    public synchronized void setConnectionLabel(String value){
        connectionLabel.setText(value);
    }

    /**
     * Call the mjUA "Bob", read the response to the Invite Request and send
     *  ACK if the mJUA sends a 200OK Response
     *
     * @param event press on Call button
     */
    @FXML
    void call(ActionEvent event) {
        if(callThread != null){
            callThread.interrupt();
        }
        callThread = new Thread(new UserAgent());
        callThread.start();
    }

    /**
     * Hang Up the call sending a Bye Request is the Session is active and read
     *  the ACK Response sent by the mjUA "Bob"
     *
     * @param event press on Hang Up button
     */
    @FXML
    void hangUp(ActionEvent event) {
        if (Session.isActive()) {
            OutputAudio.setSendingAudio(false);
            UserAgent.send(Request.getBye());
            Response.showMessage();
        }
    }

    /**
     * Start sending a sine wave in RTP Packets to the UserAgent "Bob",
     *  who plays it once received
     *
     * @param event press on Sinusoidal Audio button
     */
    @FXML
    void sendSinusoidalAudio(ActionEvent event) {
        if (!OutputAudio.isSendingAudio()) {
            AudioSinusoidalThread sinusoidalThread = new AudioSinusoidalThread();
            new Thread(sinusoidalThread).start();
        }
    }

    /**
     * Receive mjUA "Bob" RTP Packets, edit the packet's payload with randomly
     *  generated bytes and send the packet back to him
     *
     * @param event press on Spoiled Audio button
     */
    @FXML
    void sendSpoiledAudio(ActionEvent event) {
        if (!OutputAudio.isSendingAudio()) {
            AudioFileThread spoiledThread = new AudioFileThread();
            new Thread(spoiledThread).start();
        }
    }

    /**
     * Stop sending audio
     *
     * @param event press on Stop button
     */
    @FXML
    void stopAudio(ActionEvent event) {
        OutputAudio.setSendingAudio(false);
    }

    /**
     * Save logs on a external file in resources/requests/logs.txt              //  LOGS TAB
     *
     * @param event press on Save button
     */
    @FXML
    void saveLogs(ActionEvent event) {
        Session.save();
    }

    @FXML
    void updateLogs(ActionEvent event) {

    }

    /**
     * Save the new settings of the UserAgent                                   // SETTINGS TAB
     *
     * @param event press on Save button
     */
    @FXML
    void saveSettings(ActionEvent event) {
        String newName = userNameLabel.getText();
        if(!Session.isActive() && !newName.equals("")) {
            Request.setSenderName(newName);
        }
    }
}
